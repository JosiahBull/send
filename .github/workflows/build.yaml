name: Build Devcontainer

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build_arm64:
    permissions:
      contents: read
      packages: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Print Versions
        run: |
          echo "Docker Version:"
          docker --version
      - name: Create the image name
        id: imageName
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository }}"
          SHA_IMAGE_NAME=$(echo "$IMAGE_NAME" | awk '{print tolower($0)}'):${{ github.sha }}-arm64
          IMAGE_NAME=$(echo "$IMAGE_NAME" | awk '{print tolower($0)}'):latest-arm64
          echo "::set-output name=IMAGE_NAME::$IMAGE_NAME"
          echo "::set-output name=SHA_IMAGE_NAME::$SHA_IMAGE_NAME"
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.imageName.outputs.IMAGE_NAME }}
      - name: Build image
        id: build
        run: |
          docker buildx build \
            --platform linux/arm64 \
            --file Dockerfile \
            --tag ${{ steps.imageName.outputs.IMAGE_NAME }} \
            --tag ${{ steps.imageName.outputs.SHA_IMAGE_NAME }} \
            --load \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache \
            .
      - name: Push Docker image
        id: push
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker push ${{ steps.imageName.outputs.IMAGE_NAME }}
          docker push ${{ steps.imageName.outputs.SHA_IMAGE_NAME }}

  build_amd64:
    permissions:
      contents: read
      packages: write
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Print Versions
        run: |
          echo "Docker Version:"
          docker --version
      - name: Create the image name
        id: imageName
        run: |
          IMAGE_NAME="${{ env.REGISTRY }}/${{ github.repository }}"
          SHA_IMAGE_NAME=$(echo "$IMAGE_NAME" | awk '{print tolower($0)}'):${{ github.sha }}-amd64
          IMAGE_NAME=$(echo "$IMAGE_NAME" | awk '{print tolower($0)}'):latest-amd64
          echo "::set-output name=IMAGE_NAME::$IMAGE_NAME"
          echo "::set-output name=SHA_IMAGE_NAME::$SHA_IMAGE_NAME"
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.imageName.outputs.IMAGE_NAME }}
      - name: Build image
        id: build
        run: |
          docker buildx build \
            --file Dockerfile \
            --tag ${{ steps.imageName.outputs.IMAGE_NAME }} \
            --tag ${{ steps.imageName.outputs.SHA_IMAGE_NAME }} \
            --load \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache \
            .
      - name: Push Docker image
        id: push
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          docker push ${{ steps.imageName.outputs.IMAGE_NAME }}
          docker push ${{ steps.imageName.outputs.SHA_IMAGE_NAME }}

  create_manifest_latest:
    needs: [build_arm64, build_amd64]
    runs-on: ubuntu-latest

    steps:
      - name: Create the Image Names
        id: imageName
        run: |
          IMAGE_NAME=$(echo "${{ env.REGISTRY }}/${{ github.repository }}" | awk '{print tolower($0)}')
          AMD64_IMAGE=$(echo "${{ env.REGISTRY }}/${{ github.repository }}:latest-amd64" | awk '{print tolower($0)}')
          ARM64_IMAGE=$(echo "${{ env.REGISTRY }}/${{ github.repository }}:latest-arm64" | awk '{print tolower($0)}')
            echo "::set-output name=IMAGE_NAME::$IMAGE_NAME"
            echo "::set-output name=AMD64_IMAGE::$AMD64_IMAGE"
            echo "::set-output name=ARM64_IMAGE::$ARM64_IMAGE"

      - name: Login to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull the images
        run: |
          docker pull ${{ steps.imageName.outputs.AMD64_IMAGE }}
          docker pull ${{ steps.imageName.outputs.ARM64_IMAGE }}

      - name: Create the manifest
        run: |
          echo "Creating manifest for ${{ env.REGISTRY }}/${{ github.repository }}:latest"
          docker manifest create ${{ steps.imageName.outputs.IMAGE_NAME }} \
            --amend ${{ steps.imageName.outputs.AMD64_IMAGE }} \
            --amend ${{ steps.imageName.outputs.ARM64_IMAGE }}

      - name: Push the manifest
        run: |
          docker manifest push ${{ steps.imageName.outputs.IMAGE_NAME }}

  create_manifest_sha:
    needs: [build_arm64, build_amd64]
    runs-on: ubuntu-latest

    steps:
      - name: Create the Image Names
        id: imageName
        run: |
          SHA_IMAGE_NAME=$(echo "${{ env.REGISTRY }}/${{ github.repository }}" | awk '{print tolower($0)}'):${{ github.sha }}
          SHA_AMD64_IMAGE=$(echo "${{ env.REGISTRY }}/${{ github.repository }}:${{ github.sha }}-amd64" | awk '{print tolower($0)}')
          SHA_ARM64_IMAGE=$(echo "${{ env.REGISTRY }}/${{ github.repository }}:${{ github.sha }}-arm64" | awk '{print tolower($0)}')
            echo "::set-output name=SHA_IMAGE_NAME::$SHA_IMAGE_NAME"
            echo "::set-output name=SHA_AMD64_IMAGE::$SHA_AMD64_IMAGE"
            echo "::set-output name=SHA_ARM64_IMAGE::$SHA_ARM64_IMAGE"

      - name: Login to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull the images
        run: |
          docker pull ${{ steps.imageName.outputs.SHA_AMD64_IMAGE }}
          docker pull ${{ steps.imageName.outputs.SHA_ARM64_IMAGE }}

      - name: Create the manifest
        run: |
          echo "Creating manifest for ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.sha }}"
          docker manifest create ${{ steps.imageName.outputs.SHA_IMAGE_NAME }} \
            --amend ${{ steps.imageName.outputs.SHA_AMD64_IMAGE }} \
            --amend ${{ steps.imageName.outputs.SHA_ARM64_IMAGE }}

      - name: Push the manifest
        run: |
          docker manifest push ${{ steps.imageName.outputs.SHA_IMAGE_NAME }}
